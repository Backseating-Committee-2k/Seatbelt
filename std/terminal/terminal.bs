namespace std {

    export function put_char(char: Char) {
        bsm {
            COPY_BYTE *R0, R1 // put the value of char into R1
            COPY *CURSOR_POINTER, R2 // get the current cursor pointer value
            COPY_BYTE R1, *R2 // write the char onto the terminal
            ADD R2, 1, R2 // increase the cursor pointer by 1
            COPY R2, *CURSOR_POINTER // write the cursor pointer back
            COPY TERMINAL_END, R45
            COMP R2, R45, R2
            JUMP_LT R2, $end_of_put_char

            // reset cursor to the terminal start
            COPY TERMINAL_START, R2
            COPY R2, *CURSOR_POINTER

            $end_of_put_char:
        }
    }

    function digit_to_char(digit: U32) ~> Char {
        let result = '0';
        bsm {
            copy *R0, R1 // get value of digit
            add R1, 48, R1 // calculate ASCII code
            add R0, 4, R2 // get address of 'result'
            copy_byte R1, *R2 // store ASCII code into 'result'
        }
        return result;
    }

    export function print(n: mutable U32) {
        let factor: mutable = 1000000000; // highest power of 10 representable as a U32
        let started_output: mutable = false;
        while factor > 0 {
            if n >= factor {
                let digit = n / factor;
                std::put_char(digit_to_char(digit));
                started_output = true;
                n = n mod factor;
            } else if started_output {
                std::put_char('0');
            }
            factor = factor / 10;
        }
        if not started_output {
            std::put_char('0');
        }
    }

}
