import std.assert;

function f() ~> U32 {
    return 1;
}

function g()  ~> U32 {
    return 2;
}

function main() {
    let functions = [f, g, f, f, f, g];
    let num_functions = value_size(functions) / value_size(functions[0]);

    let begin = functions[0]@;
    let end = begin + num_functions;

    let pointer: mutable = begin;
    let checked: mutable = [false, false];
    std::assert(not checked[0] and not checked[1]);
    while pointer != end {
        let result = pointer!();
        let distance = pointer - begin;
        if distance == 0 or (distance >= 2 and distance <= 4) {
            std::assert_equals(result, 1);
            checked[0] = true;
        } else {
            std::assert_equals(result, 2);
            checked[1] = true;
        }
        pointer = pointer + 1;
    }
    std::assert(checked[0] and checked[1]);

    checked = [false, false];
    std::assert(not checked[0] and not checked[1]);
    for let i: mutable = 0; i < num_functions; i = i + 1 {
        let result = functions[i]();
        if i == 0 or (i >= 2 and i <= 4) {
            std::assert_equals(result, 1);
            checked[0] = true;
        } else {
            std::assert_equals(result, 2);
            checked[1] = true;
        }
    }
    std::assert(checked[0] and checked[1]);
}
